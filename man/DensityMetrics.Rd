% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DensityMetrics.R
\name{DensityMetrics}
\alias{DensityMetrics}
\title{FUSION R command line interface -- Computes point density metrics using elevation-based slices.}
\usage{
DensityMetrics(
  groundfile = NULL,
  cellsize = NULL,
  slicethickness = NULL,
  outputfile = NULL,
  datafile = NULL,
  quiet = FALSE,
  verbose = FALSE,
  version = FALSE,
  newlog = FALSE,
  log = NULL,
  locale = FALSE,
  nolaszipdll = FALSE,
  skipfilecheck = FALSE,
  outlier = NULL,
  maxsliceht = NULL,
  ignoreoverlap = FALSE,
  nocsv = FALSE,
  class = NULL,
  first = FALSE,
  slices = NULL,
  grid = NULL,
  gridxy = NULL,
  align = NULL,
  buffer = NULL,
  cellbuffer = NULL,
  use64bit = TRUE,
  runCmd = TRUE,
  saveCmd = TRUE,
  cmdFile = NULL,
  cmdClear = FALSE,
  echoCmd = FALSE,
  comment = NULL
)
}
\arguments{
\item{groundfile}{character (\strong{required}): Name for ground surface model (PLANS DTM with .dtm extension).
May be wildcard or text list file (extension .txt only).}

\item{cellsize}{numeric (\strong{required}): Desired grid cell size in the same units as LIDAR data.}

\item{slicethickness}{numeric (\strong{required}): Slice thickness for density metrics in the same units
as LIDAR data.}

\item{outputfile}{character (\strong{required}): Base name for output file. Metrics are stored in CSV format with
.csv extension unless the /nocsv switch is used. Other outputs are stored in files named using the
base name and additional descriptive information. If the folder for the output file does not exist,
it will be created  when the function is called even when saving commands to a batch file.}

\item{datafile}{character (\strong{required}): Name(s) of lidar data files.}

\item{quiet}{boolean: Suppress all output during the run.}

\item{verbose}{boolean: Display all status information during the run.}

\item{version}{boolean: Report version information and exit with no processing.}

\item{newlog}{boolean: Erase the existing log file and start a new log}

\item{log}{character: Use the name specified for the log file.}

\item{locale}{boolean: Adjust program logic to input and output locale-specific numeric
formats (e.g. use a comma for the decimal separator).}

\item{nolaszipdll}{boolean: Suppress the use of the LASzip dll (c) Martin Isenburg...
removes support for compressed LAS (LAZ) files. This option
is only useful for programs that read or write point files.}

\item{skipfilecheck}{boolean: Skip logic that checks for valid point files and removes those that are invalid
prior to the start of point processing. This option is designed to overcome some limitations with windows
and wildcard processing. This option is only useful for programs that read point data.}

\item{outlier}{character: "low,high": Omit points with elevations below low and above high.
When used with data that has been normalized using a ground
surface, low and high are interpreted as heights above ground.
You should use care when using /outlier:low,high with /minht and
/maxht options. If the low value specified with /outlier is above
the value specified with /minht, the value for /outlier will
override the value specified for /minht. Similarly, if the high
value specified with /outlier is less than the value specified
for /maxht, the /outlier value will override the value for
/maxht.}

\item{maxsliceht}{numeric: "high": Limit the range of height slices from 0 to \code{high}.}

\item{ignoreoverlap}{boolean: Ignore points with the overlap flag set (LAS V1.4+ format).}

\item{nocsv}{boolean: Do not create an output file for cell metrics.}

\item{class}{character: "#,#,#,...": LAS files only: Specifies that only points with classification
values listed are to be included in the subsample.
Classification values should be separated by a comma.
e.g. (2,3,4,5) and can range from 0 to 31.
If the first character in string is ~, the list is interpreted
as the classes you DO NOT want included in the subsample.
e.g. /class:~2,3 would include all class values EXCEPT 2 and 3.}

\item{first}{boolean: Use only first returns to compute all metrics (default is to
use all returns for metrics).}

\item{slices}{character: "#,#,#,...": Use specific slice height breaks rather than evenly spaced
breaks based on the range of heights in the data (max of 64 slice heights). The first slice
always starts at 0.0.}

\item{grid}{character: "X1,X2,Y1,Y2": Force the origin of the output grid to be (X,Y) instead of
computing an origin from the data extents and force the grid to
be W units wide and H units high...W and H will be rounded up to
a multiple of cellsize.}

\item{gridxy}{character: "X1,X2,Y1,Y2": Force the origin of the output grid to be (X1,Y1) instead
of computing an origin from the data extents and force the grid
to use (X2,Y2) as the upper right corner of the coverage area.
The actual upper right corner will be adjusted to be a multiple
of cellsize.}

\item{align}{character: Force the origin and extent of the output grid to match the
lower left corner and extent of the specified PLANS format DTM file.}

\item{buffer}{numeric: Add a buffer to the data extent specified by /grid or /gridxy
when computing metrics but only output data for the specified
extent. The buffer width is first converted to a cellbuffer and
then added all around the extent. The actual buffer width may be
slightly larger than specified by width.}

\item{cellbuffer}{numeric: Add a buffer to the data extent specified by /grid or /gridxy
when computing metrics but only output data for the specified
extent. The buffer (number of cells) is added around the extent.}

\item{use64bit}{boolean: indicates 64-bit version of the program
should be used.}

\item{runCmd}{boolean: indicates command line should be executed.}

\item{saveCmd}{boolean: indicates command line should be written to a file.}

\item{cmdFile}{character: contains the name of the file to which commands
should be written.}

\item{cmdClear}{boolean: indicates file for commands should be deleted (cleared) before the command
line is written.}

\item{echoCmd}{boolean: indicates command line should be displayed.}

\item{comment}{character string containing comment to be written to command file before writing
the actual command. Only used when \code{runCmd = FALSE} and \code{saveCmd = TRUE}. When written,
there is always a blank line before the comment line in the command file.}
}
\value{
Return value depends on \code{runCmd}. if \code{runCmd = TRUE}, return value is
  the (invisible) integer value return from the operating system after running the command.
  if \code{runCmd = FALSE}, return value is the (invisible) command line.
}
\description{
\code{DensityMetrics} creates command lines for the FUSION DensityMetrics program and optionally executes them.
}
\section{Multiple Commands}{

  LTKFunctions generate a separate command for each item when the required parameters are lists.
  This is useful when you want to use the same command and options but different input data and
  output files. However, this works only when the switches and options are the same for all
  commands (not lists). If you try to use a list of switches and/or options and a list of input
  files, you will produce commands using all sets of switches and/or options for every input
  file.
}

\examples{
\dontrun{
DensityMetrics("ground.dtm", 30.0, 4.0, "density.csv", "*.las")
}
}
\seealso{
Other LTKFunctions: 
\code{\link{CSV2Grid}()},
\code{\link{CanopyMaxima}()},
\code{\link{CanopyModel}()},
\code{\link{Catalog}()},
\code{\link{ClipDTM}()},
\code{\link{ClipData}()},
\code{\link{CloudMetrics}()},
\code{\link{Cover}()},
\code{\link{DTMDescribe}()},
\code{\link{FilterData}()},
\code{\link{FirstLastReturn}()},
\code{\link{GridMetrics}()},
\code{\link{GridSample}()},
\code{\link{GridSurfaceCreate}()},
\code{\link{GridSurfaceStats}()},
\code{\link{GroundFilter}()},
\code{\link{IntensityImage}()},
\code{\link{JoinDB}()},
\code{\link{MergeDTM}()},
\code{\link{MergeData}()},
\code{\link{MergeRaster}()},
\code{\link{PolyClipData}()},
\code{\link{RepairGridDTM}()},
\code{\link{ReturnDensity}()},
\code{\link{SplitDTM}()},
\code{\link{SurfaceSample}()},
\code{\link{SurfaceStats}()},
\code{\link{TINSurfaceCreate}()},
\code{\link{ThinData}()},
\code{\link{TopoMetrics}()},
\code{\link{TreeSeg}()},
\code{\link{fusionwrapr-package}}
}
\concept{LTKFunctions}
