% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MergeData.R, R/PolyClipData.R
\name{MergeData}
\alias{MergeData}
\title{FUSION R command line interface -- Merges several point cloud files into a single file.}
\usage{
MergeData(
  polyfile = NULL,
  outputfile = NULL,
  datafile = NULL,
  quiet = FALSE,
  verbose = FALSE,
  version = FALSE,
  newlog = FALSE,
  log = NULL,
  locale = FALSE,
  nolaszipdll = FALSE,
  skipfilecheck = FALSE,
  lda = FALSE,
  index = FALSE,
  outside = FALSE,
  multifile = FALSE,
  shape = NULL,
  class = NULL,
  ignoreoverlap = FALSE,
  precision = NULL,
  use64bit = TRUE,
  runCmd = TRUE,
  saveCmd = TRUE,
  cmdFile = NULL,
  cmdClear = FALSE,
  echoCmd = FALSE,
  comment = NULL
)

MergeData(
  polyfile = NULL,
  outputfile = NULL,
  datafile = NULL,
  quiet = FALSE,
  verbose = FALSE,
  version = FALSE,
  newlog = FALSE,
  log = NULL,
  locale = FALSE,
  nolaszipdll = FALSE,
  skipfilecheck = FALSE,
  lda = FALSE,
  index = FALSE,
  outside = FALSE,
  multifile = FALSE,
  shape = NULL,
  class = NULL,
  ignoreoverlap = FALSE,
  precision = NULL,
  use64bit = TRUE,
  runCmd = TRUE,
  saveCmd = TRUE,
  cmdFile = NULL,
  cmdClear = FALSE,
  echoCmd = FALSE,
  comment = NULL
)
}
\arguments{
\item{polyfile}{character (\strong{required}): Name of the polygon file used for clipping. Format
should be Arc shapefile containing polygons.}

\item{outputfile}{character (\strong{required}): Base name for output data files. Default behavior is to
create one output file for all polygons in \code{polyfile}. See below for use of ]code{outside}, \code{shape},
and /code{multifile} switches to modify this behavior.}

\item{datafile}{character (\strong{required}): LIDAR data file template, list of file names or name of
a text file containing a list of file names (must have .txt extension).}

\item{quiet}{boolean: Suppress all output during the run.}

\item{verbose}{boolean: Display all status information during the run.}

\item{version}{boolean: Report version information and exit with no processing.}

\item{newlog}{boolean: Erase the existing log file and start a new log}

\item{log}{character: Use the name specified for the log file.}

\item{locale}{boolean: Adjust program logic to input and output locale-specific numeric
formats (e.g. use a comma for the decimal separator).}

\item{nolaszipdll}{boolean: Suppress the use of the LASzip dll (c) Martin Isenburg...
removes support for compressed LAS (LAZ) files. This option
is only useful for programs that read or write point files.}

\item{skipfilecheck}{boolean: Skip logic that checks for valid point files and removes those that are invalid
prior to the start of point processing. This option is designed to overcome some limitations with windows
and wildcard processing. This option is only useful for programs that read point data.}

\item{lda}{boolean: Write sample files using FUSION's LDA format when using LAS input files.  When
using input data in a format other than LAS, output files are written in LDA format.}

\item{index}{boolean: Create FUSION index files for output data file.}

\item{outside}{boolean: Create output file containing all points outside of all polygons in \code{polyfile}.
When used with the \code{shape} option, output file will contain all points outside the specified polygon.}

\item{multifile}{boolean: Create separate output data files for each polygon in \code{polyFile}.
NOTE: The \code{multifile} switch can result in thousands of files for large polygon coverages.}

\item{shape}{character: "field,value": Use the feature in \code{polyfile} identified by value in \code{field}.
Output file will contain all points within the specified polygon. \code{ield} is a 1-based index that
refers to fields in the DBASE file associated with the shapefile. The \code{shape} option is ignored for
other formats. If polygon identifier contains a space, enclose the identifier in quotes.
Use a * for value to force indexing of the polygon file and parse polygon identifiers from \code{field}.
If you do not use the \code{shape} option in conjunction with the \code{multifile} switch, output files
will be identified using the sequential number associated with the polygon rather than a value from
a database field.}

\item{class}{character: "c,c,c,...": LAS files only: Specifies that only points with classification
values listed are to be included in the clipped points. Classification values should be separated
by a comma. For example, \code{"2,3,4,5"}. Class values can range from 0 to 31. If the first
character in string is ~, the list is interpreted as the classes you DO NOT want included in the subsample.
For example, \code{"~2,3"} would include all class values EXCEPT 2 and 3.}

\item{ignoreoverlap}{boolean: Ignore points with the overlap flag set (LAS V1.4+ format).}

\item{precision}{character: "#,#,#": Control the scale factor used for X, Y, and Z
values in output LAS files. These values will override the values
in the source LAS files. There is rarely any need for the scale
parameters to be smaller than 0.001.}

\item{use64bit}{boolean: indicates 64-bit version of the program
should be used.}

\item{runCmd}{boolean: indicates command line should be executed.}

\item{saveCmd}{boolean: indicates command line should be written to a file.}

\item{cmdFile}{character: contains the name of the file to which commands
should be written.}

\item{cmdClear}{boolean: indicates file for commands should be deleted (cleared) before the command
line is written.}

\item{echoCmd}{boolean: indicates command line should be displayed.}

\item{comment}{character string containing comment to be written to command file before writing
the actual command. Only used when \code{runCmd = FALSE} and \code{saveCmd = TRUE}. When written,
there is always a blank line before the comment line in the command file.}
}
\value{
Return value depends on \code{runCmd}. if \code{runCmd = TRUE}, return value is
  the (invisible) integer value return from the operating system after running the command.
  if \code{runCmd = FALSE}, return value is the (invisible) command line.

Return value depends on \code{runCmd}. if \code{runCmd = TRUE}, return value is
  the (invisible) integer value return from the operating system after running the command.
  if \code{runCmd = FALSE}, return value is the (invisible) command line.
}
\description{
\code{MergeData} creates command lines for the FUSION MergeData program and optionally executes them.

\code{PolyClipData} creates command lines for the FUSION PolyClipData program and optionally executes them.
}
\section{Multiple Commands}{

  LTKFunctions generate a separate command for each item when the required parameters are lists.
  This is useful when you want to use the same command and options but different input data and
  output files. However, this works only when the switches and options are the same for all
  commands (not lists). If you try to use a list of switches and/or options and a list of input
  files, you will produce commands using all sets of switches and/or options for every input
  file.


  LTKFunctions generate a separate command for each item when the required parameters are lists.
  This is useful when you want to use the same command and options but different input data and
  output files. However, this works only when the switches and options are the same for all
  commands (not lists). If you try to use a list of switches and/or options and a list of input
  files, you will produce commands using all sets of switches and/or options for every input
  file.
}

\examples{
\dontrun{
MergeData("*.las", "merged.las", class = "~7")
}
\dontrun{
PolyClipData("stands.shp", "stand_457.las", "*.las", shape = "5,457")
}
}
\seealso{
Other LTKFunctions: 
\code{\link{CSV2Grid}()},
\code{\link{CanopyMaxima}()},
\code{\link{CanopyModel}()},
\code{\link{Catalog}()},
\code{\link{ClipDTM}()},
\code{\link{ClipData}()},
\code{\link{CloudMetrics}()},
\code{\link{Cover}()},
\code{\link{DTMDescribe}()},
\code{\link{DensityMetrics}()},
\code{\link{FilterData}()},
\code{\link{FirstLastReturn}()},
\code{\link{GridMetrics}()},
\code{\link{GridSample}()},
\code{\link{GridSurfaceCreate}()},
\code{\link{GridSurfaceStats}()},
\code{\link{GroundFilter}()},
\code{\link{IntensityImage}()},
\code{\link{JoinDB}()},
\code{\link{MergeDTM}()},
\code{\link{MergeRaster}()},
\code{\link{RepairGridDTM}()},
\code{\link{ReturnDensity}()},
\code{\link{SplitDTM}()},
\code{\link{SurfaceSample}()},
\code{\link{SurfaceStats}()},
\code{\link{TINSurfaceCreate}()},
\code{\link{ThinData}()},
\code{\link{TopoMetrics}()},
\code{\link{TreeSeg}()},
\code{\link{fusionwrapr-package}}

Other LTKFunctions: 
\code{\link{CSV2Grid}()},
\code{\link{CanopyMaxima}()},
\code{\link{CanopyModel}()},
\code{\link{Catalog}()},
\code{\link{ClipDTM}()},
\code{\link{ClipData}()},
\code{\link{CloudMetrics}()},
\code{\link{Cover}()},
\code{\link{DTMDescribe}()},
\code{\link{DensityMetrics}()},
\code{\link{FilterData}()},
\code{\link{FirstLastReturn}()},
\code{\link{GridMetrics}()},
\code{\link{GridSample}()},
\code{\link{GridSurfaceCreate}()},
\code{\link{GridSurfaceStats}()},
\code{\link{GroundFilter}()},
\code{\link{IntensityImage}()},
\code{\link{JoinDB}()},
\code{\link{MergeDTM}()},
\code{\link{MergeRaster}()},
\code{\link{RepairGridDTM}()},
\code{\link{ReturnDensity}()},
\code{\link{SplitDTM}()},
\code{\link{SurfaceSample}()},
\code{\link{SurfaceStats}()},
\code{\link{TINSurfaceCreate}()},
\code{\link{ThinData}()},
\code{\link{TopoMetrics}()},
\code{\link{TreeSeg}()},
\code{\link{fusionwrapr-package}}
}
\concept{LTKFunctions}
