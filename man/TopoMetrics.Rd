% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TopoMetrics.R
\name{TopoMetrics}
\alias{TopoMetrics}
\title{FUSION R command line interface -- Computes topographic metrics using surface models.}
\usage{
TopoMetrics(
  surfacefile = NULL,
  cellsize = NULL,
  topopointspacing = NULL,
  latitude = NULL,
  tpiwindowsize = NULL,
  outputfile = NULL,
  quiet = FALSE,
  verbose = FALSE,
  version = FALSE,
  newlog = FALSE,
  log = NULL,
  locale = FALSE,
  grid = NULL,
  gridxy = NULL,
  align = NULL,
  extent = NULL,
  square = FALSE,
  annulusinnerdia = NULL,
  annuluswidth = NULL,
  diskground = FALSE,
  nointernalground = FALSE,
  lockdtmcellsize = FALSE,
  use64bit = TRUE,
  runCmd = TRUE,
  saveCmd = TRUE,
  cmdFile = NULL,
  cmdClear = FALSE,
  echoCmd = FALSE,
  comment = NULL
)
}
\arguments{
\item{surfacefile}{character (\strong{required}): Name for the input surface file (PLANS DTM format)
surfacefile may be wildcard or text list file (extension .txt).}

\item{cellsize}{numeric (\strong{required}): Size of the cell used to report topographic metrics.}

\item{topopointspacing}{numeric (\strong{required}): The spacing between points in the 3 by 3 array used
to compute the basic topographic metrics.}

\item{latitude}{numeric (\strong{required}): Latitude for the center of the data area. North latitude is
positive, South is negative. Latitude is used to compute the solar radiation index.}

\item{tpiwindowsize}{numeric (\strong{required}): The size of the window used to compute the topographic
position index. When  \code{square=TRUE} is used, the TPI window will be \code{tpiwindowsize} by \code{tpiwindowsize}.
For round windows, the diameter will be \code{tpiwindowsize}.}

\item{outputfile}{character (\strong{required}): Base name for the output metrics (CSV format). "_topo_metrics"
will be appended to the name provided on the command line.}

\item{quiet}{boolean: Suppress all output during the run.}

\item{verbose}{boolean: Display all status information during the run.}

\item{version}{boolean: Report version information and exit with no processing.}

\item{newlog}{boolean: Erase the existing log file and start a new log}

\item{log}{character: Use the name specified for the log file.}

\item{locale}{boolean: Adjust program logic to input and output locale-specific numeric
formats (e.g. use a comma for the decimal separator).}

\item{grid}{character: "X,Y,W,H": Force the origin of the output grid to be (X,Y) instead of computing
an origin from the data extents and force the grid to be W units wide and H units high...W and H will
be rounded up to a multiple of cellsize.}

\item{gridxy}{character: "X1,Y1,X2,Y2": Force the origin of the output grid to be (X1,Y1) instead
of computing an origin from the data extents and force the grid to use (X2,Y2) as the upper right
corner of the coverage area. The actual upper right corner will be adjusted to be a multiple of \code{cellsize}.}

\item{align}{character: Force the origin and extent of the output grid to match the lower left corner
and extent of the specified PLANS format DTM file.}

\item{extent}{character: Force the origin and extent of the output grid to match the lower left corner
and extent of the specified PLANS format DTM file but adjust the origin to be an even multiple of the
cell size and the width and height to be multiples of the cell size.}

\item{square}{boolean: Use a square-shaped mask when computing the topographic position index.
The default mask shape is a circle.}

\item{annulusinnerdia}{numeric: Use a doughnut-shaped mask when computing the topographic position index.
The outer diameter is \code{topopointspacing} and the inner diameter is te value specified. When using
this option to define a narrow ring, use the \code{verbose=TRUE} to display the computed mask to ensure
it meets your expectations.}

\item{annuluswidth}{numeric: Use a donut-shaped mask when computing the topographic position index.
The outer diameter is \code{tpiwindowsize} and the inner diameter is \code{TPIWindowSize-(annuluswidth*2)}. When using
this option to define a narrow ring, use \code{verbose=TRUE} to display the computed mask to ensure
it meets your expectations.}

\item{diskground}{boolean: Do not load ground surface models into memory or create a temporary surface
in memory. When this option is specified, larger areas can be processed but processing will be very
much slower.}

\item{nointernalground}{boolean: Do not create a temporary surface in memory. When this option
is specified, larger areas can be processed but processing will be much slower. This option has no
effect when used with \code{diskground=TRUE}.}

\item{lockdtmcellsize}{boolean: Force the cell size used when creating an internal ground model
to be the same as the highest resolution input ground surface model. The default behavior will
increase the cell size until the internal model will fit in the available memory.}

\item{use64bit}{boolean: indicates 64-bit version of the program
should be used.}

\item{runCmd}{boolean: indicates command line should be executed.}

\item{saveCmd}{boolean: indicates command line should be written to a file.}

\item{cmdFile}{character: contains the name of the file to which commands
should be written.}

\item{cmdClear}{boolean: indicates file for commands should be deleted (cleared) before the command
line is written.}

\item{echoCmd}{boolean: indicates command line should be displayed.}

\item{comment}{character string containing comment to be written to command file before writing
the actual command. Only used when \code{runCmd = FALSE} and \code{saveCmd = TRUE}. When written,
there is always a blank line before the comment line in the command file.}
}
\value{
Return value depends on \code{runCmd}. if \code{runCmd = TRUE}, return value is
  the (invisible) integer value return from the operating system after running the command.
  if \code{runCmd = FALSE}, return value is the (invisible) command line.
}
\description{
\code{TopoMetrics} creates command lines for the FUSION TopoMetrics program and optionally executes them.
}
\section{Multiple Commands}{

  LTKFunctions generate a separate command for each item when the required parameters are lists.
  This is useful when you want to use the same command and options but different input data and
  output files. However, this works only when the switches and options are the same for all
  commands (not lists). If you try to use a list of switches and/or options and a list of input
  files, you will produce commands using all sets of switches and/or options for every input
  file.
}

\examples{
\dontrun{
TopoMetrics("grnd.dtm", 30.0, 10.0, 43.5, 90.0, "topometrics.csv")
}
}
\seealso{
Other LTKFunctions: 
\code{\link{CanopyMaxima}()},
\code{\link{CanopyModel}()},
\code{\link{Catalog}()},
\code{\link{ClipDTM}()},
\code{\link{ClipData}()},
\code{\link{CloudMetrics}()},
\code{\link{Cover}()},
\code{\link{DTMDescribe}()},
\code{\link{DensityMetrics}()},
\code{\link{FirstLastReturn}()},
\code{\link{GridMetrics}()},
\code{\link{GridSurfaceCreate}()},
\code{\link{GridSurfaceStats}()},
\code{\link{GroundFilter}()},
\code{\link{IntensityImage}()},
\code{\link{MergeDTM}()},
\code{\link{MergeData}()},
\code{\link{MergeRaster}()},
\code{\link{ReturnDensity}()},
\code{\link{SplitDTM}()},
\code{\link{SurfaceSample}()},
\code{\link{TINSurfaceCreate}()},
\code{\link{ThinData}()},
\code{\link{TreeSeg}()},
\code{\link{fusionwrapr}}
}
\concept{LTKFunctions}
