% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GridSurfaceCreate.R
\name{GridSurfaceCreate}
\alias{GridSurfaceCreate}
\title{FUSION R command line interface -- Creates a gridded surface model from point data.}
\usage{
GridSurfaceCreate(
  surfacefile = NULL,
  cellsize = NULL,
  xyunits = NULL,
  zunits = NULL,
  coordsys = NULL,
  zone = NULL,
  horizdatum = NULL,
  vertdatum = NULL,
  datafile = NULL,
  quiet = FALSE,
  verbose = FALSE,
  version = FALSE,
  newlog = FALSE,
  log = NULL,
  locale = FALSE,
  nolaszipdll = FALSE,
  skipfilecheck = FALSE,
  median = NULL,
  smooth = NULL,
  slope = NULL,
  spike = NULL,
  residuals = FALSE,
  filldist = NULL,
  class = NULL,
  ignoreoverlap = FALSE,
  minimum = FALSE,
  maximum = FALSE,
  grid = NULL,
  gridxy = NULL,
  align = NULL,
  extent = NULL,
  smoothfirst = FALSE,
  use64bit = TRUE,
  runCmd = TRUE,
  saveCmd = TRUE,
  cmdFile = NULL,
  cmdClear = FALSE,
  echoCmd = FALSE,
  comment = NULL
)
}
\arguments{
\item{surfacefile}{character (\strong{required}): Name for output surface file (stored in PLANS DTM format with .dtm extension).
If the folder for the output file does not exist, it will be created
when the function is called even when saving commands to a batch file.}

\item{cellsize}{numeric (\strong{required}): Desired grid cell size in the same units as LIDAR data.}

\item{xyunits}{character (\strong{required}): Units for LIDAR data XY (M for meters or F for feet).}

\item{zunits}{character (\strong{required}): Units for LIDAR data elevations (M for meters or F for feet).}

\item{coordsys}{numeric (\strong{required}): Coordinate system for LIDAR data:
0 for unknown
1 for UTM
2 for state plane)}

\item{zone}{numeric (\strong{required}): Coordinate system zone for LIDAR data (0 for unknown).}

\item{horizdatum}{numeric (\strong{required}): Horizontal datum:
0 for unknown
1 for NAD27
2 for NAD83}

\item{vertdatum}{numeric (\strong{required}): Vertical datum:
0 for unknown
1 for NGVD29
2 for NAVD88
3 for GRS80}

\item{datafile}{character (\strong{required}): Name(s) of lidar data files.}

\item{quiet}{boolean: Suppress all output during the run.}

\item{verbose}{boolean: Display all status information during the run.}

\item{version}{boolean: Report version information and exit with no processing.}

\item{newlog}{boolean: Erase the existing log file and start a new log}

\item{log}{character: Use the name specified for the log file.}

\item{locale}{boolean: Adjust program logic to input and output locale-specific numeric
formats (e.g. use a comma for the decimal separator).}

\item{nolaszipdll}{boolean: Suppress the use of the LASzip dll (c) Martin Isenburg...
removes support for compressed LAS (LAZ) files. This option
is only useful for programs that read or write point files.}

\item{skipfilecheck}{boolean: Skip logic that checks for valid point files and removes those that are invalid
prior to the start of point processing. This option is designed to overcome some limitations with windows
and wildcard processing. This option is only useful for programs that read point data.}

\item{median}{numeric: Apply median filter to model using # by # neighbor window.}

\item{smooth}{numeric: Apply mean filter to model using # by # neighbor window.}

\item{slope}{numeric: Filter areas from the surface with slope greater than # percent.
Slope filtering takes place after all other smoothing operations.}

\item{spike}{numeric: Filter to remove spikes with slopes greater than # percent.
Spike filtering takes place after slope filtering.}

\item{residuals}{boolean: Compute residual statistics for all points.}

\item{filldist}{numeric: Maximum search radius (in cells) used when filling holes in the
surface. Default is 99 cells.}

\item{class}{character: "#,#,#,...": LAS files only: Specifies that only points with classification
values listed are to be included in the subsample.
Classification values should be separated by a comma.
e.g. (2,3,4,5) and can range from 0 to 31.
If the first character in string is ~, the list is interpreted
as the classes you DO NOT want included in the subsample.
e.g. /class:~2,3 would include all class values EXCEPT 2 and 3.}

\item{ignoreoverlap}{boolean: Ignore points with the overlap flag set (LAS V1.4+ format).}

\item{minimum}{boolean: Use the minimum elevation value in cells to create the surface.}

\item{maximum}{boolean: Use the maximum elevation value in cells to create the surface.}

\item{grid}{character: "X1,X2,Y1,Y2": Force the origin of the output grid to be (X,Y) instead of
computing an origin from the data extents and force the grid to
be W units wide and H units high...W and H will be rounded up to
a multiple of cellsize.}

\item{gridxy}{character: "X1,X2,Y1,Y2": Force the origin of the output grid to be (X1,Y1) instead
of computing an origin from the data extents and force the grid
to use (X2,Y2) as the upper right corner of the coverage area.
The actual upper right corner will be adjusted to be a multiple
of cellsize.}

\item{align}{character: Force the origin and extent of the output grid to match the
lower left corner and extent of the specified PLANS format DTM file.}

\item{extent}{character: Force the origin and extent of the output grid to match the
lower left corner and extent of the specified PLANS format DTM
file but adjust the origin to be an even multiple of the cell
size and the width and height to be multiples of the cell size.}

\item{smoothfirst}{boolean: indicating smoothing should occur before median
filtering. The default is for median filtering to happen before smoothing.}

\item{use64bit}{boolean: indicates 64-bit version of the program
should be used.}

\item{runCmd}{boolean: indicates command line should be executed.}

\item{saveCmd}{boolean: indicates command line should be written to a file.}

\item{cmdFile}{character: contains the name of the file to which commands
should be written.}

\item{cmdClear}{boolean: indicates file for commands should be deleted (cleared) before the command
line is written.}

\item{echoCmd}{boolean: indicates command line should be displayed.}

\item{comment}{character string containing comment to be written to command file before writing
the actual command. Only used when \code{runCmd = FALSE} and \code{saveCmd = TRUE}. When written,
there is always a blank line before the comment line in the command file.}
}
\value{
Return value depends on \code{runCmd}. if \code{runCmd = TRUE}, return value is
  the (invisible) integer value return from the operating system after running the command.
  if \code{runCmd = FALSE}, return value is the (invisible) command line.
}
\description{
\code{GridSurfaceCreate} creates command lines for the FUSION GridSurfaceCreate program and optionally executes them.
}
\section{Multiple Commands}{

  LTKFunctions generate a separate command for each item when the required parameters are lists.
  This is useful when you want to use the same command and options but different input data and
  output files. However, this works only when the switches and options are the same for all
  commands (not lists). If you try to use a list of switches and/or options and a list of input
  files, you will produce commands using all sets of switches and/or options for every input
  file.
}

\examples{
\dontrun{
GridSurfaceCreate("test.dtm", 2.0, "M", "M", 1, 10, 2, 2, "Test/pts.las", class = "2")
}
}
\seealso{
Other LTKFunctions: 
\code{\link{CSV2Grid}()},
\code{\link{CanopyMaxima}()},
\code{\link{CanopyModel}()},
\code{\link{Catalog}()},
\code{\link{ClipDTM}()},
\code{\link{ClipData}()},
\code{\link{CloudMetrics}()},
\code{\link{Cover}()},
\code{\link{DTMDescribe}()},
\code{\link{DensityMetrics}()},
\code{\link{FilterData}()},
\code{\link{FirstLastReturn}()},
\code{\link{GridMetrics}()},
\code{\link{GridSample}()},
\code{\link{GridSurfaceStats}()},
\code{\link{GroundFilter}()},
\code{\link{IntensityImage}()},
\code{\link{JoinDB}()},
\code{\link{MergeDTM}()},
\code{\link{MergeData}()},
\code{\link{MergeRaster}()},
\code{\link{RepairGridDTM}()},
\code{\link{ReturnDensity}()},
\code{\link{SplitDTM}()},
\code{\link{SurfaceSample}()},
\code{\link{SurfaceStats}()},
\code{\link{TINSurfaceCreate}()},
\code{\link{ThinData}()},
\code{\link{TopoMetrics}()},
\code{\link{TreeSeg}()},
\code{\link{fusionwrapr}}
}
\concept{LTKFunctions}
