% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TreeSeg.R
\name{TreeSeg}
\alias{TreeSeg}
\title{FUSION R command line interface -- Individual tree segmentation using CHM and point cloud.}
\usage{
TreeSeg(
  CHM = NULL,
  ht_threshold = NULL,
  outputfile = NULL,
  quiet = FALSE,
  verbose = FALSE,
  version = FALSE,
  newlog = FALSE,
  log = NULL,
  locale = FALSE,
  nolaszipdll = FALSE,
  skipfilecheck = FALSE,
  height = FALSE,
  ptheight = FALSE,
  maxht = NULL,
  grid = NULL,
  gridxy = NULL,
  align = NULL,
  buffer = NULL,
  ground = NULL,
  points = NULL,
  class = NULL,
  segmentpts = FALSE,
  clipfolder = NULL,
  shape = FALSE,
  cleantile = FALSE,
  htmultiplier = NULL,
  projection = NULL,
  use64bit = TRUE,
  runCmd = TRUE,
  saveCmd = TRUE,
  cmdFile = NULL,
  cmdClear = FALSE,
  echoCmd = FALSE,
  comment = NULL
)
}
\arguments{
\item{CHM}{character (\strong{required}): Name for canopy height model (PLANS DTM with .dtm extension).
May be wildcard or text list file (extension .txt only). This can be a canopy surface
model if the /ground option is used to specify a ground surface for normalization.}

\item{ht_threshold}{numeric (\strong{required}): Minimum height for object segmentation. Portions of the CHM
below this height are not considered in the segmentation.}

\item{outputfile}{character (\strong{required}): Base name for output file. Metrics are stored in CSV format with
.csv extension. Other outputs are stored in files named using the base name and additional
descriptive information. If the folder for the output file does not exist, it will be created
when the function is called even when saving commands to a batch file.}

\item{quiet}{boolean: Suppress all output during the run.}

\item{verbose}{boolean: Display all status information during the run.}

\item{version}{boolean: Report version information and exit with no processing.}

\item{newlog}{boolean: Erase the existing log file and start a new log}

\item{log}{character: Use the name specified for the log file.}

\item{locale}{boolean: Adjust program logic to input and output locale-specific numeric
formats (e.g. use a comma for the decimal separator).}

\item{nolaszipdll}{boolean: Suppress the use of the LASzip dll (c) Martin Isenburg...
removes support for compressed LAS (LAZ) files. This option
is only useful for programs that read or write point files.}

\item{skipfilecheck}{boolean: Skip logic that checks for valid point files and removes those that are invalid
prior to the start of point processing. This option is designed to overcome some limitations with windows
and wildcard processing. This option is only useful for programs that read point data.}

\item{height}{boolean: Normalize canopy surface model(s) using ground model(s).}

\item{ptheight}{numeric: Normalize point heights using ground model(s).}

\item{maxht}{numeric: Force the maximum height for the segmentation. This will override
the actual maximum value in the CHM. Use this option to force equal vertical resolution
across areas with varying maximum canopy heights.}

\item{grid}{character: "X1,X2,Y1,Y2": Force the origin of the analysis grid to be (X,Y) instead of
computing an origin from the data extents and force the grid to be W units wide and H units
high...W and H will be rounded up to a multiple of cellsize.}

\item{gridxy}{character: "X1,X2,Y1,Y2": Force the origin of the analysis grid to be (X1,Y1) instead
of computing an origin from the data extents and force the grid to use (X2,Y2) as the upper
right corner of the coverage area. The actual upper right corner will be adjusted to be a
multiple of cellsize.}

\item{align}{character: Force the origin and extent of the analysis grid to match the
lower left corner and extent of the specified PLANS format DTM file.}

\item{buffer}{numeric: Add a buffer to the data extent specified by /grid, /gridxy or /align
when segmenting but only output data for the segments located within the extent.}

\item{ground}{character: Use the specified bare-earth surface model to normalize the LIDAR data
file may be wildcard or text list file (extension .txt only).}

\item{points}{character: LIDAR point data file(s) in LDA or LAS format. May be wildcard or text
list file (extension .txt only). Points are assigned to individual basins or crown polygons
and a separate file (in LDA format) is output for each basin or polygon.}

\item{class}{character: "c,c,c,...": LAS files only: Specifies that only points with classification
values listed are to be included in the subsample.
Classification values should be separated by a comma.
e.g. (2,3,4,5) and can range from 0 to 31.
If the first character in string is ~, the list is interpretted
as the classes you DO NOT want included in the subsample.
e.g. /class:~2,3 would include all class values EXCEPT 2 and 3.}

\item{segmentpts}{boolean: Output points for the raster segments. Default is to output points
for crown polygons when the /shape option is used and for raster segments when /shape is
not used. Used only with the /points option.}

\item{clipfolder}{character: folder name where point files for individual clips are stored. Used
only with the /points option. If not specified, point files are stored in the same folder with
other outputs. If the folder does not exist, it will be created when the function is called even
when saving commands to a batch file.}

\item{shape}{boolean: Create a shapefile containing the high points and basin metrics.}

\item{cleantile}{boolean: Output an ASCII raster map that only includes basins within the
reporting extent defined by the /grid, /gridxy, and /align options.}

\item{htmultiplier}{numeric: Multiply the high point and surface heights by this value for
output products. Also multiply individual point heights by # before writing point files
(see /points option).}

\item{projection}{character: Associate the specified projection file with shapefile and raster
data products.}

\item{use64bit}{boolean: indicates 64-bit version of the program
should be used.}

\item{runCmd}{boolean: indicates command line should be executed.}

\item{saveCmd}{boolean: indicates command line should be written to a file.}

\item{cmdFile}{character: contains the name of the file to which commands
should be written.}

\item{cmdClear}{boolean: indicates file for commands should be deleted (cleared) before the command
line is written.}

\item{echoCmd}{boolean: indicates command line should be displayed.}

\item{comment}{character string containing comment to be written to command file before writing
the actual command. Only used when \code{runCmd = FALSE} and \code{saveCmd = TRUE}. When written,
there is always a blank line before the comment line in the command file.}
}
\value{
Return value depends on \code{runCmd}. if \code{runCmd = TRUE}, return value is
  the (invisible) integer value return from the operating system after running the command.
  if \code{runCmd = FALSE}, return value is the (invisible) command line.
}
\description{
\code{TreeSeg} creates command lines for the FUSION TreeSeg program and optionally executes them.
}
\section{Multiple Commands}{

  LTKFunctions generate a separate command for each item when the required parameters are lists.
  This is useful when you want to use the same command and options but different input data and
  output files. However, this works only when the switches and options are the same for all
  commands (not lists). If you try to use a list of switches and/or options and a list of input
  files, you will produce commands using all sets of switches and/or options for every input
  file.
}

\examples{
\dontrun{
TreeSeg("CHM.dtm", 2.0, "trees.csv")
}
}
\seealso{
Other LTKFunctions: 
\code{\link{CSV2Grid}()},
\code{\link{CanopyMaxima}()},
\code{\link{CanopyModel}()},
\code{\link{Catalog}()},
\code{\link{ClipDTM}()},
\code{\link{ClipData}()},
\code{\link{CloudMetrics}()},
\code{\link{Cover}()},
\code{\link{DTMDescribe}()},
\code{\link{DensityMetrics}()},
\code{\link{FilterData}()},
\code{\link{FirstLastReturn}()},
\code{\link{GridMetrics}()},
\code{\link{GridSample}()},
\code{\link{GridSurfaceCreate}()},
\code{\link{GridSurfaceStats}()},
\code{\link{GroundFilter}()},
\code{\link{IntensityImage}()},
\code{\link{JoinDB}()},
\code{\link{MergeDTM}()},
\code{\link{MergeData}()},
\code{\link{MergeRaster}()},
\code{\link{RepairGridDTM}()},
\code{\link{ReturnDensity}()},
\code{\link{SplitDTM}()},
\code{\link{SurfaceSample}()},
\code{\link{SurfaceStats}()},
\code{\link{TINSurfaceCreate}()},
\code{\link{ThinData}()},
\code{\link{TopoMetrics}()},
\code{\link{fusionwrapr-package}}
}
\concept{LTKFunctions}
